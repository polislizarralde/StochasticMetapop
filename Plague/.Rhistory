dimnames = list(c("S", "E", "I", "R", "D"),
c("event1"))
)
# Create an external transfer event to move exposed or infected individuals
# from node 1 (Ystad) to other nodes every seven days (tspan)
list_of_events1 <- lapply(tspan,
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
})
print(beginDaysPlague[-1][2])
for(parish_name in parish_names[-1]) {
parish_events <- list()
begin_parish_name <-
lapply(data_cluster$parishname, function(x) {
data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
})
}
for(parish_name in data_cluster$ParishName[-1]) {
parish_events <- list()
begin_parish_name <-
lapply(data_cluster$parishname, function(x) {
data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
})
}
for(parish_name in data_cluster$ParishName[-1]) {
parish_events <- list()
begin_parish_name <-
lapply(data_cluster$ParishName, function(x) {
data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
})
}
for(parish_name in data_cluster$ParishName[-1]) {
parish_events <- list()
begin_parish_name <-
lapply(data_cluster$ParishName, function(x) {
data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
})
print("parish_name", begin_parish_name)
}
for(parish_name in data_cluster$ParishName[-1]) {
parish_events <- list()
begin_parish_name <-
lapply(data_cluster$ParishName, function(x) {
data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
})
print("parish_name")
print(begin_parish_name)
}
for(parish_name in data_cluster$ParishName[-1]) {
parish_events <- list()
begin_parish_name <-
lapply(data_cluster$ParishName, function(x) {
data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
})
print(parish_name)
print(begin_parish_name)
}
data_cluster$ParishName[-1]
data_cluster$ParishName["YSTAD"]
data_cluster[data_cluster$ParishName == "YSTAD"]
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
print(initial_time)
print(final_time)
library(SimInf)
library(tools)
library(dplyr)
library(ggplot2)
library(readr) # for read csv files
if (!require(tidyverse)) {
install.packages("tidyverse")
}
# Load tidyverse
library(tidyverse)
# set the directory to find the csv in the folder data
setwd("~/Documents/GitHub/StochasticMetapop/Plague")
data_cluster <- read_csv("data/Ystad_group.csv")
beginDaysPlague <- data_cluster$BeginDaysPlague
endDaysPlague <- data_cluster$EndDaysPlague
parish_names <- data_cluster$ParishName
patchPop <- data_cluster$BEF1699
maxDays <- max(endDaysPlague)
# data
class_plague <- data_cluster$plague
cum_deaths <- data_cluster$VictimsNumber
# Importing the file with the gravitational term Ni*Nj/dij^2
grav_matrix <- read_csv("data/gravitational.csv")
colnames(grav_matrix) <- parish_names
weight_matrix <- as.matrix(grav_matrix)
# Fixing the file to compute the distance between polygons
#data_cluster <- (data_cluster, centroid, c("lat","long"), sep = ",", remove = TRUE, convert = TRUE)
View(data_cluster)
# generating the initial conditions for the model
npatches <- length(parish_names)
S0 <- rep(0, npatches) # nolint: object_name_linter.
E0 <- rep(0, npatches)
R0 <- rep(0, npatches)
D0 <- rep(0, npatches)
I0 <- rep(0, npatches)
I0[1] <- 1.0
for (i in 1:npatches) {
S0[i] <- patchPop[i] - E0[i] - I0[i] - R0[i]
}
u0 <- data_frame(
S0 = S0,
E0 = E0,
I0 = I0,
R0 = R0,
D0 = D0
)
# patchPop <- function(df,
#                      column_pop = 'BEF1699',
#                      column_name = 'ParishName'
#                     )
#                     {patchNames <- unique(df[[column_name]])
#                      patchPop <- sapply(patchNames, function(name)
#                                  {unique_pop <- unique(df[df[[name]] == name, column_pop])
#                                   if(length(unique_pop) > 0){
#                                     return(unique_pop[1]) # return only the first unique pop value
#                                   } else {
#                                     return(NA)
#                                   }
#                                   })
#                      return(patchPop)
# }
#
# pop_values <- patchPop(data_cluster, data_cluster$BEF1699, data_cluster$ParishName)
# View(pop_values)
# patchPop(data_cluster = data_cluster)
transitions <- c(
"S-> beta*S*I/(S+E+I+R) -> E",
"E -> sigma*E -> I",
"I -> gamma*(1-mu)*I -> R",
"I -> (gamma*mu)*I -> D"
)
compartments <- c("S", "E", "I", "R", "D")
parameters <- c("beta", "mu")
colnames(u0) <- compartments
tspan <- seq(from = 1, to = maxDays + 20, by = 7)
print(tspan)
print(beginDaysPlague[-1])
#EMatrix (#compartments x #events). For each column vector j we put 1 if the compartment
# participated in the event j, otherwise zero.
E <- matrix(
c(0, 1, 1, 0, 0),
nrow = 5,
ncol = 1,
dimnames = list(c("S", "E", "I", "R", "D"),
c("event1"))
)
# Create an external transfer event to move exposed or infected individuals
# from node 1 (Ystad) to other nodes every seven days (tspan)
list_of_events1 <- lapply(tspan,
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
})
print(beginDaysPlague[-1][2])
# Create an external transfer event to move exposed or infected individuals
# from node 1 (Ystad) to other nodes starting seven days after the initial plague period in each node and every seven days
data_cluster$ParishName[-1]
for(parish_name in data_cluster$ParishName[-1]) {
parish_events <- list()
begin_parish_name <-
lapply(data_cluster$ParishName, function(x) {
data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
})
end_parish_name <-
lapply(data_cluster$ParishName, function(x) {
data_cluster$EndDaysPlague[data_cluster$ParishName == x]
})
}
print(head(beginDaysPlague[-1], length(beginDaysPlague[-1])-2)[3])
# Create an external transfer event to move exposed or infected individuals
# from node 1 (Ystad) to other nodes starting seven days after the initial plague
# period in Ystad and every seven days until seven days before the end period in Ystad
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
print(initial_time)
print(final_time)
for(parish_name in data_cluster$ParishName[-1]){
parish_events <- list()
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
infect_event <- lapply(initial_time:final_time,
function(t) {
infect <- data.frame(
event = "extTrans",
time = t+7,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
# Append the events to parish_events
parish_events <- c(parish_events, infect_event)
})
}
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
infect_event <- lapply(initial_time:final_time,
function(t) {
infect <- data.frame(
event = "extTrans",
time = t+7,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
# Append the events to parish_events
parish_events <- c(parish_events, infect_event)
})
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
infect_event <- lapply(seq(from = initial_time, to = final_time, by = 7),
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
})
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
infect_event <- lapply(seq(from = initial_time, to = final_time, by = 7),
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
})
events <- do.call(rbind, infect_event)
View(events)
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
infect_event <- lapply(seq(from = initial_time + 7, to = final_time - 7, by = 7),
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
})
#}
events <- do.call(rbind, infect_event)
View(events)
# for(parish_name in data_cluster$ParishName[-1]){
#   parish_events <- list()
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
infect_event <- lapply(seq(from = initial_time + 7, to = final_time, by = 7),
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
})
#}
events <- do.call(rbind, infect_event)
View(events)
local_parameters <- data.frame(beta = (runif(npatches)),
mu = runif(npatches))
model <- mparse(
transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.17 , gamma = 0.4),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = 1:maxDays + 20
)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
# Cumulative deaths
traj_D <- trajectory(model = result, compartments = "D")
# Show the points per node
View(traj_D)
# Plot a specific trajectory
ggplot(traj_D) + geom_line(aes(x = time, y = D, color = factor(node)))
# Infected
traj_I <- trajectory(model = result, compartments = "I")
# Show the points per node
View(traj_I)
# Plot a specific trajectory
ggplot(traj_I) + geom_line(aes(x = time, y = I, color = factor(node)))
library(SimInf)
library(tools)
library(dplyr)
library(ggplot2)
library(readr) # for read csv files
if (!require(tidyverse)) {
install.packages("tidyverse")
}
# Load tidyverse
library(tidyverse)
# set the directory to find the csv in the folder data
setwd("~/Documents/GitHub/StochasticMetapop/Plague")
data_cluster <- read_csv("data/Ystad_group.csv")
beginDaysPlague <- data_cluster$BeginDaysPlague
endDaysPlague <- data_cluster$EndDaysPlague
parish_names <- data_cluster$ParishName
patchPop <- data_cluster$BEF1699
maxDays <- max(endDaysPlague)
# data
class_plague <- data_cluster$plague
cum_deaths <- data_cluster$VictimsNumber
# Importing the file with the gravitational term Ni*Nj/dij^2
grav_matrix <- read_csv("data/gravitational.csv")
colnames(grav_matrix) <- parish_names
weight_matrix <- as.matrix(grav_matrix)
# Fixing the file to compute the distance between polygons
#data_cluster <- (data_cluster, centroid, c("lat","long"), sep = ",", remove = TRUE, convert = TRUE)
View(data_cluster)
# generating the initial conditions for the model
npatches <- length(parish_names)
S0 <- rep(0, npatches) # nolint: object_name_linter.
E0 <- rep(0, npatches)
R0 <- rep(0, npatches)
D0 <- rep(0, npatches)
I0 <- rep(0, npatches)
I0[1] <- 1.0
for (i in 1:npatches) {
S0[i] <- patchPop[i] - E0[i] - I0[i] - R0[i]
}
u0 <- data_frame(
S0 = S0,
E0 = E0,
I0 = I0,
R0 = R0,
D0 = D0
)
# patchPop <- function(df,
#                      column_pop = 'BEF1699',
#                      column_name = 'ParishName'
#                     )
#                     {patchNames <- unique(df[[column_name]])
#                      patchPop <- sapply(patchNames, function(name)
#                                  {unique_pop <- unique(df[df[[name]] == name, column_pop])
#                                   if(length(unique_pop) > 0){
#                                     return(unique_pop[1]) # return only the first unique pop value
#                                   } else {
#                                     return(NA)
#                                   }
#                                   })
#                      return(patchPop)
# }
# pop_values <- patchPop(data_cluster, data_cluster$BEF1699, data_cluster$ParishName)
# View(pop_values)
# patchPop(data_cluster = data_cluster)
transitions <- c(
"S-> beta*S*I/(S+E+I+R) -> E",
"E -> sigma*E -> I",
"I -> gamma*(1-mu)*I -> R",
"I -> (gamma*mu)*I -> D"
)
compartments <- c("S", "E", "I", "R", "D")
parameters <- c("beta", "mu")
colnames(u0) <- compartments
tspan <- seq(from = 1, to = maxDays + 20, by = 7)
#EMatrix (#compartments x #events). For each column vector j we put 1 if the compartment
# participated in the event j, otherwise zero.
E <- matrix(
c(0, 1, 1, 0, 0),
nrow = 5,
ncol = 1,
dimnames = list(c("S", "E", "I", "R", "D"),
c("event1"))
)
# Create an external transfer event to move exposed or infected individuals
# from node 1 (Ystad) to other nodes every seven days (tspan)
list_of_events1 <- lapply(tspan,
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = 0.05,
select = 1,
shift = 0
)
})
# Create an external transfer event to move exposed or infected individuals
# from node 1 (Ystad) to other nodes starting seven days after the initial plague period in each node and every seven days
# for(parish_name in data_cluster$ParishName[-1]) {
#   parish_events <- list()
#   begin_parish_name <-
#     lapply(data_cluster$ParishName, function(x) {
#       data_cluster$BeginDaysPlague[data_cluster$ParishName == x]
#     })
#   end_parish_name <-
#     lapply(data_cluster$ParishName, function(x) {
#       data_cluster$EndDaysPlague[data_cluster$ParishName == x]
#     })
#
#
#   }
# Create an external transfer event to move exposed or infected individuals
# from node 1 (Ystad) to other nodes starting seven days after the initial plague
# period in Ystad and every seven days until seven days before the end period in Ystad
data_init_node <- subset(data_cluster, ParishName == "YSTAD")
initial_time <- data_init_node$BeginDaysPlague[1]
final_time <- data_init_node$EndDaysPlague[1]
for (i in 2:npatches) {
infect_event <-
lapply(seq(from = initial_time + 7, to = final_time, by = 7),
function(t) {
infect <- data.frame(
event = "extTrans",
time = t,
node = 1,
dest = 2:npatches,
n = 0,
proportion = grav_matrix$YSTAD[i],
select = 1,
shift = 0
)
})
}
events <- do.call(rbind, infect_event)
local_parameters <- data.frame(beta = (runif(npatches)),
mu = runif(npatches))
model <- mparse(
transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.17 , gamma = 0.4),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = 1:maxDays + 20
)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
# Cumulative deaths
traj_D <- trajectory(model = result, compartments = "D")
# Show the points per node
View(traj_D)
# Plot a specific trajectory
ggplot(traj_D) + geom_line(aes(x = time, y = D, color = factor(node)))
# Infected
traj_I <- trajectory(model = result, compartments = "I")
# Show the points per node
View(traj_I)
# Plot a specific trajectory
ggplot(traj_I) + geom_line(aes(x = time, y = I, color = factor(node)))
View(Ystad_group)
View(Ystad_group)
#
# A minimal install for groundhog (package management that allows for reproducibility)
# and conflicted (guards against packages overwriting each others' functions in the main namespace)
#
#install.packages("groundhog")
library(groundhog)
pkgs <- c("conflicted","SimInf","readxl","dplyr","lubridate","ggplot2","mlrMBO","DiceKriging","rgenoud")
groundhog.library(pkgs, "2023-04-30")
