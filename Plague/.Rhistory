u0
scania <- readRDS("data/scania_geometry.RDS")
scania
View(scania)
u0
nodes <- c(Ystad = 128, Oja = 136, Hedeskoga = 134, Bjaresjo = 133, Bromma = 135, Stora_Herrestad = 137, Borrie = 140, Stora_Kopinge = 138)
nodes
transitions <- c("S-> beta*S*I/(S+E+I+R) -> E",
"E -> sigma*E -> I",
"I -> gamma*(1-mu)*I -> R",
"I -> (gamma*mu)*I -> D")
compartments <- c("S", "E", "I", "R", "D")
parameters <- c("beta", "mu")
colnames(u0) <- compartments
tspan <- seq(from = 1, to = 350, by = 1) # Switched to daily.
E <- matrix(c(0, 1, 1, 0, 0), nrow = 5, ncol = 1, dimnames = list(c("S", "E", "I", "R", "D"), c("event1")))
E
all_possible_events <- readRDS("data/events_distances.RDS")
all_possible_events
relevant_events <- dplyr::filter(all_possible_events,node %in% nodes | dest %in% nodes)
View(relevant_events)
all_relevant_events <- tidyr::crossing(relevant_events, time = tspan) %>% dplyr::relocate(time,.after = event)
max(all_possible_events$proportion)
min(all_possible_events$proportion) # 19594 is the longest distance between centroids of parishes
all_possible_events$proportion <- 1/(all_possible_events$proportion / 1000)^2
all_possible_events$proportion
max(all_possible_events$proportion)
min(all_possible_events$proportion) # 1049 is the shorted distance (in meters) between centroids of parishes
all_relevant_events <- tidyr::crossing(relevant_events, time = tspan) %>% dplyr::relocate(time,.after = event)
local_parameters <- data.frame(beta = c(0.6, 0.5, 0.4, 0.4, 0.4, 0.1, 0.1, 0.4),
mu = c(0.8, 0.8, 0.7, 0.7, 0.6, 0.2, 0.2, 0.5))
gravity_scaler <- 0.5
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.17 , gamma = 0.4),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
View(events)
# Events
all_possible_events <- readRDS("data/events_distances.RDS")
# Scale the proportion back to something we want.
max(all_possible_events$proportion) # 19594 is the longest distance (in meters) between centroids of parishes
min(all_possible_events$proportion) # 1049 is the shorted distance (in meters) between centroids of parishes
# Inverse square (in km) for gravity.
all_possible_events$proportion <- 1/(all_possible_events$proportion / 1000)^2
# Filter on relevant events for this cluster.
relevant_events <- dplyr::filter(all_possible_events,node %in% nodes | dest %in% nodes)
# Expand the relevant events to include a time axis
all_relevant_events <- tidyr::crossing(relevant_events, time = tspan) %>% dplyr::relocate(time,.after = event)
local_parameters <- data.frame(beta = c(0.6, 0.5, 0.4, 0.4, 0.4, 0.1, 0.1, 0.4),
mu = c(0.8, 0.8, 0.7, 0.7, 0.6, 0.2, 0.2, 0.5))
gravity_scaler <- 0.5
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.17 , gamma = 0.4),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
relevant_events
nodes
nodes_lookup <- data.frame(node_scania = nodes,node_cluster = 1:nrow(u0))
nodes_lookup
nodes_lookup <- data.frame(node_scania = nodes,node_cluster = 1:nrow(u0))
nodes_lookup
left_join(relevant_events,nodes_lookup)
?left_join
left_join(relevant_events,nodes_lookup, by = c("node","node_scania"))
relevant_events
nodes_lookup
nodes_lookup <- nodes
nodes_lookup
length(nodes)
colnames(nodes_lookup) <- 1:length(nodes)
names(nodes_lookup) <- 1:length(nodes)
nodes_lookup
left_join(relevant_events,nodes_lookup, by = nodes_lookup)
relevant_events
nodes_lookup
# Events
all_possible_events <- readRDS("data/events_distances.RDS")
# Scale the proportion back to something we want.
max(all_possible_events$proportion) # 19594 is the longest distance (in meters) between centroids of parishes
min(all_possible_events$proportion) # 1049 is the shorted distance (in meters) between centroids of parishes
# Inverse square (in km) for gravity.
all_possible_events$proportion <- 1/(all_possible_events$proportion / 1000)^2
# Not much room to scale up, but there is room to scale down.
max(all_possible_events$proportion) # 0.908
min(all_possible_events$proportion) # 0.0026
# Filter on relevant events for this cluster.
relevant_events <- dplyr::filter(all_possible_events,node %in% nodes & dest %in% nodes)
relevant_events <- dplyr::filter(all_possible_events,node %in% nodes & dest %in% nodes) %>%
mutate(node = match(node, nodes_lookup),
dest = match(dest, nodes_lookup))
relevant_events
# Expand the relevant events to include a time axis
all_relevant_events <- tidyr::crossing(relevant_events, time = tspan) %>% dplyr::relocate(time,.after = event)
# Parameters
local_parameters <- data.frame(beta = c(0.6, 0.5, 0.4, 0.4, 0.4, 0.1, 0.1, 0.4),
mu = c(0.8, 0.8, 0.7, 0.7, 0.6, 0.2, 0.2, 0.5))
gravity_scaler <- 0.5
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.17 , gamma = 0.4),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
traj_D <- trajectory(model=result, compartments = "D")
View(traj_D)
ggplot(traj_D) + geom_line(aes(x=time,y=D,color=factor(node)))
traj <- trajectory(result)
View(traj)
plot(traj)
plot(result)
?SimInf::plot
?plot
traj
long_traj <- pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
long_traj <- dplyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
?pivot_longer
traj <- trajectory(result)
long_traj <- dplyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
long_traj <- pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
library(tidyr)
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,group=type))
ggplot(long_traj) + geom_line(aes(x=time,y=count,group=node,color=type))
ggplot(long_traj) + geom_line(aes(x=time,y=count,group=node,color=type)) + facet_wrap(~type)
SimInf::plot
?SimInf::plot
plot(result, spaghetti = TRUE)
ggplot(long_traj) + geom_line(aes(x=time,y=count,group=node,color=type)) + facet_wrap(~type)
local_parameters <- data.frame(beta = c(0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6),
mu = c(0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4))
local_parameters <- data.frame(beta = c(0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6),
mu = c(0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4))
gravity_scaler <- 0.5
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
plot(result, spaghetti = TRUE)
plot(result)
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
local_parameters <- data.frame(beta = c(0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6),
mu = c(0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7))
gravity_scaler <- 0.5
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
set.seed(123)
set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
plot(result)
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
ggplot(dplyr::filter(long_traj,type="I")) + geom_line(aes(x=time,y=count,color=node))
ggplot(dplyr::filter(long_traj,type=="I")) + geom_line(aes(x=time,y=count,color=node))
dplyr::filter(long_traj,type=="I")
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
# One way to plot:
ggplot(dplyr::filter(long_traj,type=="I")) + geom_line(aes(x=time,y=count,color=node))
ggplot(traj) + geom_line(aes(x=time,y=I,color=node))
View(traj)
ggplot(traj) + geom_line(aes(x=time,y=I,color=node)) + facet_wrap(~node)
ggplot(traj) + geom_line(aes(x=time,y=I)) + facet_wrap(~node)
ggplot(trajectory(run(model = model))) + geom_line(aes(x=time,y=I)) + facet_wrap(~node)
gravity_scaler <- 0.3
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
# One way to plot:
ggplot(trajectory(run(model = model))) + geom_line(aes(x=time,y=I)) + facet_wrap(~node)
gravity_scaler <- 0.1
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
# One way to plot:
ggplot(trajectory(run(model = model))) + geom_line(aes(x=time,y=I)) + facet_wrap(~node)
View(events)
gravity_scaler <- 0.01
events <- all_relevant_events
events$proportion <- events$proportion * gravity_scaler
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.3),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
# One way to plot:
ggplot(trajectory(run(model = model))) + geom_line(aes(x=time,y=I)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.2 , gamma = 0.1),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot: https://www.rdocumentation.org/packages/SimInf/versions/5.1.0/topics/plot-methods
#plot(result)
# One way to plot:
traj <- trajectory(result)
long_traj <- tidyr::pivot_longer(traj, cols = c(S, E, I, R, D), names_to = "type", values_to = "count")
ggplot(long_traj) + geom_line(aes(x=time,y=count,color=type)) + facet_wrap(~node)
# One way to plot:
ggplot(trajectory(run(model = model))) + geom_line(aes(x=time,y=I)) + facet_wrap(~node)
model <- mparse(transitions = transitions,
compartments = compartments,
gdata = c(sigma = 0.4 , gamma = 0.1),
ldata = local_parameters,
u0 = u0,
E = E,
events = events,
tspan = tspan)
#set.seed(123)
#set_num_threads(1)
result <- run(model = model)
# One way to plot:
ggplot(trajectory(run(model = model))) + geom_line(aes(x=time,y=I)) + facet_wrap(~node)
